<page-form-view>
  <div>
    <a href="#!" class="d-block alert alert-info mb-3" if={ !props.page.get('data.model') } onclick={ (e) => props.onConfig(e) }>
      <i class="fa fa-exclamation-triangle mr-2" />
      Please select a <b>model</b> for the form.
    </a>

    <div class="px-0 px-lg-3 container-lg" if={ props.route === 'remove' }>
      <div class="card">
        <div class="card-body lead">
          Are you sure you want to remove this item?
        </div>

        <div class="card-footer text-right pt-0 pb-3">
          <button class="btn btn-danger" onclick={ (e) => onRemove(e) }>
            { loading('remove') ? 'Update' : 'Submit' }
          </button>
        </div>
      </div>
    </div>
    <div class="px-0 px-lg-3 container-lg" if={ !props.route || props.route === 'create' }>
      <div class="card">
        <div class="card-body">
          <dashup-view ref={ ref('form') } view="form" type="page" struct="form" item={ current } preview={ !props.altering } on-data={ (k, v) => onData(k, v) } on-submit={ (e, d) => onSubmit(e, d) } { ...getProps() } />
        </div>

        <div class="card-footer text-right pt-0 pb-3">
          <button if={ !loading('submit') } class="btn btn-success" onclick={ (e) => onSubmit(e) }>
            { props.current ? 'Update' : 'Submit' }
          </button>
          <button if={ loading('submit') } class="btn btn-success disabled">
            { props.current ? 'Updating...' : 'Submitting...' }
          </button>
        </div>
      </div>
    </div>
  </div>

  <script>
    // export default
    export default class PageFormView {
      
      /**
       * on before mount
       */
      onBeforeMount(...args) {
        // submit
        this.onSubmit = this.onSubmit.bind(this);

        // set current
        this.current = this.props.current || new this.props.dashup.Model();
      }
      
      /**
       * on before mount
       */
      onBeforeUpdate(props) {
        // submit
        this.onSubmit = this.onSubmit.bind(this);

        // set current
        if ((!props.current && this.current) || (props.current && props.current.get('_id') !== this.current.get('_id'))) {
          // current
          this.current = props.current || new this.props.dashup.Model();
        }
      }

      /**
       * on data
       */
      onData(field, value) {
        // set value
        this.current.set(field.name || field.uuid, value);

        // update
        this.update();
      }

      /**
       * on remove
       */
      async onRemove(e) {
        // prevent
        e.preventDefault();
        e.stopPropagation();

        // loading
        this.loading('submit', true);
        
        // await
        await this.props.current.remove();
        
        // loading
        this.loading('submit', false);

        // go
        let redirect = `/app/${this.props.page.get('_id')}`;

        // check redirect
        if (`${window.location.search}`.includes('?redirect=')) {
          // set redirect
          redirect = window.location.search.split('redirect=')[1].split('?')[0];
        }

        // go
        eden.router.go(redirect);
      }

      /**
       * on submit
       *
       * @param {Event} e
       */
      async onSubmit(e, data) {
        // prevent
        e.preventDefault();
        e.stopPropagation();

        // loading
        this.loading('submit', true);

        // submit form
        if (!data) data = this.refs.form.data();

        // submit form
        const item = await this.props.dashup.action({
          type   : 'page',
          page   : this.props.page.get('_id'),
          form   : this.props.page.get('_id'),
          model  : this.props.page.get('data.model'),
          struct : 'form',
        }, 'form.submit', data);
        
        // loading
        this.loading('submit', false);
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * get props
       */
      getProps() {
        // clone
        const newProps = { ...(this.props) };

        // delete
        delete newProps.ref;
        delete newProps.type;
        delete newProps.item;
        delete newProps.view;
        delete newProps.class;
        delete newProps.struct;

        // return
        return newProps;
      }

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</page-form-view>