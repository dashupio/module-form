<block-form-view>
  <div class={ `flex-1 d-flex flex-column h-100 w-100${props.block.background ? '' : ' card'}` }>
    <div if={ props.block.name } class={ props.block.background ? ' mb-2' : 'card-header' }>
      <b>{ props.block.name }</b>
    </div>
    <div class={ `dashup-grid oy-scroll${props.block.background ? ' flex-1' : ' card-body w-100'}` }>
      <div class="w-100 h-100">
        <dashup-view if={ !loading('form') && getSelectedForms().length } ref={ ref('form') } view="form" type="page" struct="form" item={ current } page={ getForm() } preview={ true } on-data={ (k, v) => onData(k, v) } on-submit={ (e, d) => onSubmit(e, d) } { ...getProps() } />
      </div>
    </div>
    <div if={ getSelectedForms().length } class={ `d-flex justify-content-end${props.block.background ? ' mt-2' : ' card-footer'}` }>
      <button if={ !loading('submit') } class={ `btn btn-success${state.updated ? '' : ' disabled'}` } onclick={ (e) => onSubmit(e) }>
        { props.item ? 'Update' : 'Submit' }
      </button>
      <button if={ loading('submit') } class="btn btn-success disabled">
        { props.item ? 'Updating...' : 'Submitting...' }
      </button>
    </div>
  </div>

  <script>
    // import scrollbar
    import PerfectScrollbar from 'perfect-scrollbar';

    // export default
    export default class BlockFormView {

      /**
       * on before mount
       */
      onBeforeMount(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // set current
        this.current = this.props.item || new this.props.dashup.Model();
        
      }

      /**
       * on mounted
       */
      onMounted() {
        // check frontend
        if (typeof window === 'undefined') return;
        
        // fix column sizing
        if (this.$('.oy-scroll') && !this.$('.oy-scroll.ps')) {
          // ps
          this.ps = new PerfectScrollbar(this.$('.oy-scroll'), {
            suppressScrollX : true,
          });
        }
      }

      /**
       * on mounted
       */
      onUpdated() {
        // check frontend
        if (typeof window === 'undefined') return;
        
        // check current
        if (this.props.item && this.current.get('_id') !== this.props.item.get('_id')) {
          // set item
          this.current = this.props.item;
          this.loading('form', true);
          this.loading('form', false);
        } else if (!this.props.item && this.current.get('_id')) {
          // set current
          this.current = this.props.item || new this.props.dashup.Model();
          this.loading('form', true);
          this.loading('form', false);
        }
      }

      /**
       * on data
       */
      onData(field, value) {
        // set value
        this.current.set(field.name || field.uuid, value);

        // update
        this.update({
          updated : true,
        });
      }

      /**
       * on submit
       *
       * @param {Event} e
       */
      async onSubmit(e, data) {
        // prevent
        e.preventDefault();
        e.stopPropagation();

        // loading
        this.loading('submit', true);
        this.update({
          updated : false,
        });

        // submit form
        if (!data) data = this.refs.form.data();

        // create
        const create = !data._id;

        // submit form
        const item = await this.props.dashup.action({
          type   : 'page',
          page   : this.props.page.get('_id'),
          form   : this.getSelectedForms()[0],
          model  : this.getSelectedModel(),
          struct : 'form',
        }, 'form.submit', data);

        // success
        eden.alert.success(`Successfully ${create ? 'created' : 'updated'} ${this.props.page.get('name')}`)
        
        // loading
        this.loading('submit', false);

        // go to submit again
        if (create) {
          
        }
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // GET METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * get selected model
       */
      getSelectedModel() {
        // check model
        return this.props.block.model || this.props.model;
      }

      /**
       * get selected forms
       */
      getSelectedForms() {
        // forms
        let forms = this.props.block.forms || [];

        // check form
        if (!forms.length && this.props.form) forms = [this.props.form];
        if (!forms.length && this.props.forms) forms = this.props.forms;

        // return forms
        return forms;
      }

      /**
       * get form
       */
      getForm() {
        // get selected forms
        const forms = this.getSelectedForms();

        // form
        return this.props.dashup.page(forms[0]);
      }

      /**
       * get props
       */
      getProps() {
        // clone
        const newProps = { ...(this.props) };

        // delete
        delete newProps.type;
        delete newProps.view;
        delete newProps.item;
        delete newProps.form;
        delete newProps.page;
        delete newProps.class;
        delete newProps.struct;
        delete newProps.preview;

        // return
        return newProps;
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</block-form-view>